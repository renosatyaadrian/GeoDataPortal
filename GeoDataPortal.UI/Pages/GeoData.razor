@page "/geodata"
@using GeoDataPortal.UI.Services
@using GeoDataPortal.UI.Models
@inject IGeoDataService GeoDataService
@inject ITimeseriesService TimeseriesService

<h2>Geo Data</h2>

<hr />

<h4>Create / Update Data</h4>
<EditForm Model="@formGeoData" OnValidSubmit="HandleGeoDataSubmit">
    <InputText @bind-Value="formGeoData.Name" class="form-control" placeholder="Name" />
    <InputTextArea @bind-Value="formGeoData.GeoJson" class="form-control" placeholder="GeoJson" />
    <button type="submit" class="btn btn-success mt-2">@((isEditGeoData) ? "Update" : "Create") GeoData</button>
</EditForm>

<hr />

@if (geoDatas is null)
{
    <p><em>Loading...</em></p>
}
else if (!geoDatas.Any())
{
    <p>No GeoData available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr><th>Name</th><th>Action</th></tr>
        </thead>
        <tbody>
            @foreach (var gd in geoDatas)
            {
                <tr>
                    <td>@gd.Name</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => SelectGeoData(gd.Id)">Detail & Timeseries</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditGeoData(gd)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteGeoData(gd.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedGeoData != null)
{
    <h4>GeoData Detail: @selectedGeoData.Name</h4>
    <p><b>GeoJson:</b> <pre>@selectedGeoData.GeoJson</pre></p>

    <h5>Timeseries Data</h5>

    <EditForm Model="@formTimeseries" OnValidSubmit="HandleTimeseriesSubmit">
        <InputDate @bind-Value="formTimeseries.Timestamp" class="form-control" />
        <InputText @bind-Value="formTimeseries.Type" class="form-control" placeholder="Type" />
        <InputText @bind-Value="formTimeseries.Unit" class="form-control" placeholder="Unit" />
        <InputNumber @bind-Value="formTimeseries.Value" class="form-control" />
        <button type="submit" class="btn btn-secondary mt-2">
            @((isEditTimeseries) ? "Update" : "Add") Timeseries
        </button>
    </EditForm>

    @if (timeseriesPoints == null)
    {
        <p><em>Loading timeseries...</em></p>
    }
    else if (!timeseriesPoints.Any())
    {
        <p>No timeseries data.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr><th>Timestamp</th><th>Type</th><th>Unit</th><th>Value</th><th>Action</th></tr>
            </thead>
            <tbody>
                @foreach (var ts in timeseriesPoints)
                {
                    <tr>
                        <td>@ts.Timestamp</td>
                        <td>@ts.Type</td>
                        <td>@ts.Unit</td>
                        <td>@ts.Value</td>
                        <td>
                            <button class="btn btn-sm btn-warning" @onclick="() => EditTimeseries(ts)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteTimeseries(ts.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <button class="btn btn-outline-secondary" @onclick="ClearSelection">Close</button>
}

@code {
    List<Models.GeoData>? geoDatas;
    Models.GeoData formGeoData = new();
    Models.GeoData? selectedGeoData;
    bool isEditGeoData = false;

    List<Models.Timeseries>? timeseriesPoints;
    Models.Timeseries formTimeseries = new();
    bool isEditTimeseries = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadGeoData();
    }

    async Task LoadGeoData()
    {
        geoDatas = await GeoDataService.GetAllGeoDataAsync();
    }

    async Task HandleGeoDataSubmit()
    {
        if (isEditGeoData)
            await GeoDataService.UpdateGeoDataAsync(formGeoData);
        else
        {
            formGeoData.Id = Guid.NewGuid();
            await GeoDataService.CreateGeoDataAsync(formGeoData);
        }

        formGeoData = new();
        isEditGeoData = false;
        await LoadGeoData();
    }

    void EditGeoData(Models.GeoData data)
    {
        formGeoData = new Models.GeoData
        {
            Id = data.Id,
            Name = data.Name,
            GeoJson = data.GeoJson,
        };
        isEditGeoData = true;
    }

    async Task DeleteGeoData(Guid id)
    {
        await GeoDataService.DeleteGeoDataAsync(id);
        await LoadGeoData();
        if (selectedGeoData?.Id == id) ClearSelection();
    }

    async Task SelectGeoData(Guid id)
    {
        selectedGeoData = await GeoDataService.GetGeoDataByIdAsync(id);
        formTimeseries = new Timeseries { GeoDataId = id };
        timeseriesPoints = (await TimeseriesService.GetTimeseriesByGeoDataIdAsync(id))!.ToList();
    }

    void ClearSelection()
    {
        selectedGeoData = null;
        timeseriesPoints = null;
        formTimeseries = new();
        isEditTimeseries = false;
    }

    async Task HandleTimeseriesSubmit()
    {
        if (isEditTimeseries)
            await TimeseriesService.UpdateTimeseriesAsync(formTimeseries);
        else
        {
            formTimeseries.Id = Guid.NewGuid();
            await TimeseriesService.CreateTimeseriesAsync(formTimeseries);
        }

        if (selectedGeoData != null)
            timeseriesPoints = (await TimeseriesService.GetTimeseriesByGeoDataIdAsync(selectedGeoData.Id))!.ToList();

        formTimeseries = new Timeseries { GeoDataId = selectedGeoData?.Id ?? Guid.Empty };
        isEditTimeseries = false;
    }

    void EditTimeseries(Timeseries ts)
    {
        formTimeseries = new Timeseries
        {
            Id = ts.Id,
            GeoDataId = ts.GeoDataId,
            Timestamp = ts.Timestamp,
            Value = ts.Value,
            Type = ts.Type,
            Unit = ts.Unit
        };
        isEditTimeseries = true;
    }

    async Task DeleteTimeseries(Guid id)
    {
        await TimeseriesService.DeleteTimeseriesAsync(id);
        if (selectedGeoData != null)
            timeseriesPoints = (await TimeseriesService.GetTimeseriesByGeoDataIdAsync(selectedGeoData.Id))!.ToList();
    }
}
